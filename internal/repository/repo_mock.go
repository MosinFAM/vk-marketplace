// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repo_mock.go -package=repository Repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	models "github.com/MosinFAM/vk-marketplace/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAd mocks base method.
func (m *MockRepository) CreateAd(ad models.Ad) (models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAd", ad)
	ret0, _ := ret[0].(models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAd indicates an expected call of CreateAd.
func (mr *MockRepositoryMockRecorder) CreateAd(ad any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAd", reflect.TypeOf((*MockRepository)(nil).CreateAd), ad)
}

// GetAdByID mocks base method.
func (m *MockRepository) GetAdByID(id string) (*models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdByID", id)
	ret0, _ := ret[0].(*models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdByID indicates an expected call of GetAdByID.
func (mr *MockRepositoryMockRecorder) GetAdByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdByID", reflect.TypeOf((*MockRepository)(nil).GetAdByID), id)
}

// GetUserByUsername mocks base method.
func (m *MockRepository) GetUserByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRepositoryMockRecorder) GetUserByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserByUsername), username)
}

// ListAds mocks base method.
func (m *MockRepository) ListAds(filter AdsFilter) ([]models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAds", filter)
	ret0, _ := ret[0].([]models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAds indicates an expected call of ListAds.
func (mr *MockRepositoryMockRecorder) ListAds(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAds", reflect.TypeOf((*MockRepository)(nil).ListAds), filter)
}

// RegisterUser mocks base method.
func (m *MockRepository) RegisterUser(username, passwordHash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", username, passwordHash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockRepositoryMockRecorder) RegisterUser(username, passwordHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockRepository)(nil).RegisterUser), username, passwordHash)
}
